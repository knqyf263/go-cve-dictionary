package fetcher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"time"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	"github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/util"
)

//FetchRequest has fetch target information
type FetchRequest struct {
	Year int
	URL  string
	GZIP bool
}

//FetchResult has url and fetched Bytes
type FetchResult struct {
	Year int
	URL  string
	Body []byte
}

//FetchFeedFiles fetches vulnerability feed file concurrently
func FetchFeedFiles(reqs []FetchRequest) (results []FetchResult, err error) {
	reqChan := make(chan FetchRequest, len(reqs))
	resChan := make(chan FetchResult, len(reqs))
	errChan := make(chan error, len(reqs))
	defer close(reqChan)
	defer close(resChan)
	defer close(errChan)

	for _, r := range reqs {
		log.Infof("Fetching... %s", r.URL)
	}

	go func() {
		for _, r := range reqs {
			reqChan <- r
		}
	}()

	concurrency := len(reqs)
	tasks := util.GenWorkers(concurrency)
	for range reqs {
		tasks <- func() {
			select {
			case req := <-reqChan:
				body, err := fetchFile(req)
				if err != nil {
					errChan <- err
					return
				}
				resChan <- FetchResult{
					Year: req.Year,
					URL:  req.URL,
					Body: body,
				}
			}
			return
		}
	}

	errs := []error{}
	timeout := time.After(10 * 60 * time.Second)
	for range reqs {
		select {
		case res := <-resChan:
			results = append(results, res)
		case err := <-errChan:
			errs = append(errs, err)
		case <-timeout:
			return results, fmt.Errorf("Timeout Fetching")
		}
	}
	if 0 < len(errs) {
		return results, fmt.Errorf("%s", errs)
	}
	return results, nil
}

func fetchFile(req FetchRequest) (body []byte, err error) {
	var errs []error
	var proxyURL *url.URL
	var resp *http.Response

	httpCilent := &http.Client{}
	if c.Conf.HTTPProxy != "" {
		if proxyURL, err = url.Parse(c.Conf.HTTPProxy); err != nil {
			return nil, fmt.Errorf("Failed to parse proxy url: %s", err)
		}
		httpCilent = &http.Client{Transport: &http.Transport{Proxy: http.ProxyURL(proxyURL)}}
	}

	if resp, err = httpCilent.Get(req.URL); err != nil {
		fmt.Fprintf(os.Stderr, "Download failed: %v\n", err)
		os.Exit(1)
	}
	defer resp.Body.Close()

	buf := bytes.NewBuffer(nil)
	io.Copy(buf, resp.Body)

	if len(errs) > 0 || resp == nil || resp.StatusCode != 200 {
		return nil, fmt.Errorf(
			"HTTP error. errs: %v, url: %s", errs, req.URL)
	}

	if req.GZIP {
		reader, err := gzip.NewReader(buf)
		defer reader.Close()
		if err != nil {
			return nil, fmt.Errorf(
				"Failed to decompress NVD feedfile. url: %s, err: %s",
				req.URL, err)
		}

		bytes, err := ioutil.ReadAll(reader)
		if err != nil {
			return nil, fmt.Errorf(
				"Failed to Read NVD feedfile. url: %s, err: %s",
				req.URL, err)
		}
		return bytes, nil
	}

	return buf.Bytes(), nil
}

func getFileSize(req FetchRequest) int {
	var proxyURL *url.URL
	var resp *http.Response
	var err error

	httpCilent := &http.Client{}
	if c.Conf.HTTPProxy != "" {
		if proxyURL, err = url.Parse(c.Conf.HTTPProxy); err != nil {
			return 0
		}
		httpCilent = &http.Client{Transport: &http.Transport{Proxy: http.ProxyURL(proxyURL)}}
	}

	if resp, err = httpCilent.Head(req.URL); err != nil {
		return 0
	}
	defer resp.Body.Close()

	if resp.Header.Get("Accept-Ranges") != "bytes" {
		log.Warnf("Not supported range access.")
	}

	// the value -1 indicates that the length is unknown.
	if resp.ContentLength <= 0 {
		log.Infof("Failed to get content length.")
		return 0
	}
	return int(resp.ContentLength)
}
